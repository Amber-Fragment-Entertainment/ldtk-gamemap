// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Assets.ldtk_gamemap.Editor.LDtkReader;
//
//    var simplifiedData = SimplifiedData.FromJson(jsonString);

namespace ldtk_simplified
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SimplifiedData
    {
        [JsonProperty("identifier")]
        public string Identifier { get; set; }

        [JsonProperty("uniqueIdentifer")]
        public Guid UniqueIdentifer { get; set; }

        [JsonProperty("x")]
        public long X { get; set; }

        [JsonProperty("y")]
        public long Y { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("bgColor")]
        public string BgColor { get; set; }

        [JsonProperty("neighbourLevels")]
        public NeighbourLevel[] NeighbourLevels { get; set; }

        [JsonProperty("customFields")]
        public SimplifiedDataCustomFields CustomFields { get; set; }

        [JsonProperty("layers")]
        public string[] Layers { get; set; }

        [JsonProperty("entities")]
        public Entities Entities { get; set; }
    }

    public partial class SimplifiedDataCustomFields
    {
        [JsonProperty("roomType")]
        public string RoomType { get; set; }
    }

    public partial class Entities
    {
        [JsonProperty("Item")]
        public Item[] Item { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("iid")]
        public Guid Iid { get; set; }

        [JsonProperty("layer")]
        public string Layer { get; set; }

        [JsonProperty("x")]
        public long X { get; set; }

        [JsonProperty("y")]
        public long Y { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("color")]
        public long Color { get; set; }

        [JsonProperty("customFields")]
        public ItemCustomFields CustomFields { get; set; }
    }

    public partial class ItemCustomFields
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("price")]
        public long Price { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }
    }

    public partial class NeighbourLevel
    {
        [JsonProperty("levelIid")]
        public Guid LevelIid { get; set; }

        [JsonProperty("dir")]
        public string Dir { get; set; }
    }

    public partial class SimplifiedData
    {
        public static SimplifiedData FromJson(string json) => JsonConvert.DeserializeObject<SimplifiedData>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SimplifiedData self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
